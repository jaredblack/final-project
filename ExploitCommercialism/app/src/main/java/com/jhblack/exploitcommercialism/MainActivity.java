package com.jhblack.exploitcommercialism;

import android.content.res.Resources;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.support.constraint.ConstraintLayout;
import android.support.constraint.ConstraintSet;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import org.w3c.dom.Text;

import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

public class MainActivity extends AppCompatActivity {
    Age age;

    private View.OnClickListener upgradeOnClickListener;
    private Timer timer;
    private TimerTask timerTask;
    private Handler handler = new Handler();

    private void stopTimer(){
        if(timer != null){
            timer.cancel();
            timer.purge();
        }
    }

    private void startTimer(){
        timer = new Timer();
        timerTask = new TimerTask() {
            public void run() {
                handler.post(new Runnable() {
                    public void run(){
                        getMoney(findViewById(android.R.id.content));
                    }
                });
            }
        };
        timer.schedule(timerTask, 1000, 1000);
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

//        ImageButton huntUpgrade = findViewById(R.id.upgrade1BT);
//        ColorMatrix matrix = new ColorMatrix();
//        matrix.setSaturation(1);
//        ColorMatrixColorFilter filter = new ColorMatrixColorFilter(matrix);
//        huntUpgrade.setColorFilter(filter);

        age = new PrehistoricAge();
        setUpNewAge();
        TextView ageTV = findViewById(R.id.ageTV);
        ageTV.setText(age.getAgeName());



        TextView moneyTV = findViewById(R.id.moneyTV);
        TextView upgradeCostH = findViewById(R.id.upgradeCostH);
        upgradeCostH.setText("Cost:"+"$"+age.getUpgrades().get(0).getInitCost());
        moneyTV.setText("Money: $"+age.getMoney());
        startTimer();
    }

    public void getMoney(View view) {
        String money = "Money: $"+age.updateMoney();
        TextView moneyTV = findViewById(R.id.moneyTV);
        moneyTV.setText(money);
    }


    public void upgradeFarm() {
        int x = age.getUpgrades().get(1).levelUp(age.getMoney());
        age.setMoney(x);
        String money = String.format(getResources().getString(R.string.money), "$"+age.getMoney());
        TextView moneyTV = findViewById(R.id.moneyTV);
        moneyTV.setText(money);
    }

    public void nextAge() {
        if (age instanceof PrehistoricAge){
            age = new StoneAge(age.getIncome(), age.getMoney());
        } else if (age instanceof StoneAge && age.getUpgrades().size()==4){
            age = new IndustrialAge(age.getIncome(), age.getMoney());
        }
        //setUpNewAge();
    }

    private void setUpNewAge() {
        Resources rec = getResources();
        ConstraintLayout layout = findViewById(R.id.activity_main);

        ImageButton townHallBT = findViewById(R.id.townHallBT);
        int tid = View.generateViewId();
        townHallBT.setId(tid);
        townHallBT.setBackground(rec.getDrawable(age.getTownHallIcon()));

        //Upgrades
        ConstraintSet upgradeSet = new ConstraintSet();
        List<Upgrade> upgrades = age.getUpgrades();
        int[] upgradeViewIds = new int[upgrades.size()];
        for(int i = 0; i < upgrades.size(); i++) {
            ImageButton upgradeBT = new ImageButton(this);
            int id = View.generateViewId();
            upgradeBT.setId(id);

            upgradeBT.setOnClickListener(new UpgradeOnClickListener(upgrades.get(i).getUpgradeId()));
            upgradeBT.setBackground(rec.getDrawable(upgrades.get(i).getIcon()));
            upgradeBT.setScaleType(ImageView.ScaleType.FIT_CENTER);
            upgradeViewIds[i] = upgradeBT.getId();
            upgradeSet.connect(upgradeBT.getId(), ConstraintSet.BOTTOM, ConstraintSet.PARENT_ID, ConstraintSet.BOTTOM,300);
//          upgradeSet.connect(upgradeBT.getId(), ConstraintSet.TOP, townHallBT.getId(), ConstraintSet.BOTTOM);
            upgradeSet.constrainHeight(upgradeBT.getId(),160);
            upgradeSet.constrainWidth(upgradeBT.getId(), 160);
            layout.addView(upgradeBT);
        }

        upgradeSet.createHorizontalChain(ConstraintSet.PARENT_ID, ConstraintSet.LEFT, ConstraintSet.PARENT_ID, ConstraintSet.RIGHT,
                upgradeViewIds, null, ConstraintSet.CHAIN_SPREAD);
        upgradeSet.applyTo(layout);
    }


    public void upgradeHunt() {
        int x = age.getUpgrades().get(0).levelUp(age.getMoney());
        age.setMoney(x);
        updateMoneyTV();
        String cost = String.format(getResources().getString(R.string.upgrade_cost), "$" + age.getUpgrades().get(0).getNextUpgradeCost());
        if (age.getUpgrades().get(0).getLevel() == age.getUpgrades().get(0).getMaxLevel()) {
            cost = "No more upgrades available";
        }
        TextView upgradeCostH = findViewById(R.id.upgradeCostH);
        upgradeCostH.setText(cost);
    }

    public void upgradeAge() {
        if (age instanceof PrehistoricAge) {
            age = new StoneAge(age.getIncome(), age.getMoney());
        } else if(age instanceof StoneAge) {

        }
    }

    public void upgradeMining() {
        int x = age.getUpgrades().get(2).levelUp(age.getMoney());
        age.setMoney(x);

    }

    public void upgradeForges() {
        if (((StoneAge) age).miningLevel()>=3) {
            if (age.getUpgrades().size()== 3) {
                ((StoneAge) age).addForges();
            }
            int x = age.getUpgrades().get(3).levelUp(age.getMoney());
            age.setMoney(x);
        }
        updateMoneyTV();
    }

    public void updateMoneyTV() {
        String money = String.format(getResources().getString(R.string.money), "$" + age.getMoney());
        TextView moneyTV = findViewById(R.id.moneyTV);
        moneyTV.setText(money);
    }

    public class UpgradeOnClickListener implements View.OnClickListener {
        private String upgradeType;
        public UpgradeOnClickListener(String upgradeType) {
            this.upgradeType = upgradeType;
        }


        @Override
        public void onClick(View v) {
            switch(upgradeType) {
                case "farming":
                    upgradeFarm();
                    break;
                case "forges":
                    upgradeForges();
                    break;
                case "hunting":
                    upgradeHunt();
                    break;
                case "mining":
                    upgradeMining();
                    break;
                default:
                    Log.d("MainActivity", "Wrong key for upgrade type");
                    break;
            }
        }
    }
}